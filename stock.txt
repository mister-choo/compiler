/*
struct Oper_Token {
  Logical_token val;
  Logical_token operation;
};
Logical_token Deal_with(const Logical_token &tkn) {
  using namespace Constants;
  auto index = tkn.value.index();
  if (index == 3) {
    std::vector<Oper_Token> tokens;
    const auto &statements = tkn.Get_val<Logical_token::Statement>().val;
    Logical_token slot1, slot2;
    for (auto &statement : statements) {
      const auto index_inner = statement.value.index();
      if ((index_inner >= 1 && index_inner <= 3) || (index_inner == 5)) {
        slot1 = statement;
      } else if (index_inner == 6) {
        slot2 = statement;
        tokens.emplace_back(Oper_Token{slot1, slot2});
      }
    }

  } else if (index == 4) {
    const auto &statements = tkn.Get_val<Logical_token::Brace_enclosed>().val;
    for (auto &statement : statements) {
      Deal_with(statement);
    }
  }
}
*/
/*
std::vector<std::string> separate_statements(std::string &command) {
  std::vector<std::string> statements;
  typedef boost::tokenizer<boost::char_separator<char>> tokenizer;
  boost::char_separator<char> statements_filter{";"};
  tokenizer tok{command, statements_filter};
  for (const auto &t : tok) {
    std::cout << "tok part: " << t << std::endl;
    std::string str = t;
    // boost::erase_all(str, "\r\n");
    // boost::erase_all(str, "  ");
    boost::trim(str);
    statements.emplace_back(str);
  }
  return statements;
}
*/

/*std::vector<Token> tokens;
std::vector<Logical_token> log_tokens;


tokens = Tokenize_string(command);

for (auto &token : tokens) {
  log_tokens.emplace_back(token);
}*/



if(213213){
  42134342 + 43-2134212* 222+sin(302312);
  hop(3213);
  1231+21312+21312;
}
else{
  sdasdasdasd+321321;
  dsadasd;
}
42 + (213*(2 - 3)    ) - 1.23 - ((1.23231*33) + 3232322);
dsadass++;
dsa==dasdsad;
dsa+= dasdsad^21;




/**/